#include<stdio.h>
#include<conio.h>
#include<stdlib.h>
#include<math.h>
#define max 100
#define N 128
int i,j,p[10];


int n,flag[max]={0},w[max],m[max][max],W;
float unit[max];
int y[max],fp=-1,fw;
int v[10][10],cap,x[10]={0};
 int i1;
   int cap1;


void sort();
void show();
void knapsack(int ,float ,float );
int max1(int i,int j)
{
 return ((i>j)?i:j);
}
int knap(int i,int j)
{


 int value;
 if(v[i][j]<0)
 {
  if(j<w[i])
   value=knap(i-1,j);
  else
   value=max1(knap(i-1,j),p[i]+knap(i-1,j-w[i]));
  v[i][j]=value;
 }
 return(v[i][j]);
}




int main()
{
 int profit,count=0,sum=0;


 printf("nEnter the number of elementn");
 scanf("%d",&n);

  printf("Enter the profit and weights of the elements\n");
 for(i=1;i<=n;i++)
 {
  printf("\nFor item no %d ",i);
printf("%d %d",p[i]=rand()%21+10,w[i]=rand() %16+5);


   sum=sum+w[i];
 }



 printf("\t\t\t\n\nThe limit total weight for this problem is=%d\n\n",cap1=floor(0.6*sum));


 for(i=1;i<=n;i++)
  for(j=0;j<=cap1;j++)
   if((i==0)||(j==0))
    v[i][j]=0;
   else
    v[i][j]=-1;
 profit=knap(n,cap1);
 i=n;
 j=cap1;
 while(j!=0&&i!=0)
 {
  if(v[i][j]!=v[i-1][j])
  {
   x[i]=1;
   j=j-w[i];
   i--;
  }
  else
   i--;
 }



printf("\n\n-------------------------------------------------------");
 printf("\n The brute_force result is as follow: ");
 printf("\n-------------------------------------------------------");


printf("\nThe item include in the optimal solution are:\n\n ");
 printf("\n\titem  \t\t\tweight  \tprofit\n");
 int sum1=0;
 for(i=1;i<=n;i++)
  {

         if(x[i])
         {
             sum1=sum1+w[i];

   printf("\t%d\t\t\t%d\t\t%d\n",++count,w[i],p[i]);
         }


 }
 printf("\t\t\t\n\nThe max total weight is:=%d\n\n",sum1);

 printf("Total profit = %d",profit);



   printf("\n\n\n-------------------------------------------------------");
 printf("\n The refinement algorithm result is as follow: ");
 printf("\n-------------------------------------------------------");



 int cur_w,cur_w1,i3;
    float tot_v;
    int  maxi;
    int used[10];
 for (i3 = n; i3 >0 ;--i3)
{

    used[i3] = 0;

     cur_w = cap1;

        maxi = -1;

       printf("\n\nPriting the row entries:(format: {n, W})\n\n");
        printf("   {%d %d } \n\n", i3, cur_w);
        for (i3 = n; i3> 0; --i3)
    {
             cur_w1 = cap1;

        printf("\nThe %d row entries is:\n", i3);


       if ((used[i3] == 0) &&((maxi == -1) || ((float)p[i3]/w[i3] > (float)p[maxi]/w[maxi])))
           {

         maxi = i3;
      printf("\n{%d %d }",  maxi,cur_w1);
      }
        used[maxi] = 1; /* mark the maxi-th object as used */
        cur_w1-= w[maxi]; /* with the object in the bag, I can carry less */
        tot_v += p[maxi];

    if (cur_w1 >= 0)
               printf("  {%d %d} {%d %d } \n\n",i3, cur_w,i3,   cur_w1 );

    }


}

int j2,i2,k2;
  for(j2=0;j2<=cap1;j2++)

   m[0][j2]=0;

 for(i2=1;i2<=n;i2++)

 {

  for(j2=0;j2<=cap1;j2++)

  {

   if(w[i2]<=j2)

   {

    if( m[i2-1][j2] > (m[i2-1][j2-w[i2]]+p[i2]) )
    {



     m[i2][j2]=m[i2-1][j2];

  }
    else

     m[i2][j2]=m[i2-1][j2-w[i2]]+p[i2];

   }

   else

    m[i2][j2]=m[i2-1][j2];

  }

 }


 i2=n;

 k2=cap1;

 while(i2>0 && k2>0)

 {

  if(m[i2][k2]!=m[i2-1][k2])

  {

   flag[i2]=1;               //to find the resultant vector

   k2=k2-w[i2];

   i2=i2-1;

  }

  else

   i2--;

 }


  printf("\n\n\nThe B Matrix is:\n\n");


 for(i2=0;i2<=n;i2++)

 {

  printf("%d|", i2); //to print the vertical line

  for(j2=0;j2<=cap1;j2++)

   printf(" %d",m[i2][j2]);

  printf("\n\n");

 }




 printf("\nThe resultant vector is ");

 printf("( ");

 for(i2=1;i2<=n;i2++)

  printf("%d ",flag[i2]);

 printf(")");


 printf("\n");



 printf("\nThe item include in the optimal solution are: \n ");

 printf("\nitem  Weight Profit\n");

 for(i2=0;i2<=cap1;i2++)

 {

  if(flag[i2]==1)

  {
     printf("%d\t",i2);
   printf("%d\t",w[i2]);

   printf("%d\n",p[i2]);

  }

 }

 printf("\n\nThe max profit is %d",m[n][cap1]);

printf("\n\n-------------------------------------------------------");
 printf("\n The backtracking algorithm result is as follow: ");
 printf("\n-------------------------------------------------------");

sort();
   printf("\n\nPrinting the nodes in visiting order: \n");
knapsack(0,0.0,0.0);
show();

return 0;
}
void show()
{
float s=0.0;
 printf("\n\nThe item include in the optimal solution are: \n ");
printf("\n\tItem\tWeight\tCost\tUnit Profit\tSelected ");
for(i=1;i<=n;i++)
printf("\n\t%d\t%d\t%d\t%f\t%d",i+1,w[i],p[i],unit[i],x[i]);

printf("\n\n The Sack now holds following items : ");
for(i=1;i<=n;i++)
if(x[i]==1)
   {
   printf("%d\t",i+1);
   s += (float) p[i] * (float) x[i];
   }

printf("\n Maximum Profit: %f ",s);
}

/*Arrange the item based on high profit per Unit*/
void sort()
{
int t,t1;
float t2;
for(i=0;i<n;i++)
unit[i] = (float) p[i] / (float) w[i];
for(i=1;i<=n-1;i++)
   {
   for(j=i+1;j<n;j++)
      {
      if(unit[i]  < unit[j])
         {
         t2 = unit[i];
         unit[i] = unit[j];
         unit[j] = t2;
         t = p[i];
         p[i] = p[j];
         p[j] = t;
         t1 = w[i];
         w[i] = w[j];
         w[j] =t1;


         }
      }
    }
}

float bound(float cp,float cw,int k)
{
float b = cp;
float c = cw;



for(i=k;i<=n;i++)
{

   c = c+w[i];
   if( c <  cap1)
      b = b +p[i];
   else
   return (b+(1-(c- cap1)/ (float)w[i])*p[i]);


}
return b;

}

void knapsack(int k,float cp,float cw)
{

  int a,b1;

int n1=n;
if(n1>=k)
{


       a = (int)(cp+p[k]+0.5);
       b1 = (int)(cw+w[k]+0.5);
 printf("\n\nThe %d th node,the profit: %d, the weight: %d the bound:",k,a,b1);
 n1--;
}

  if(cw+w[k] <= cap1)
   {

   y[k] = 1;
   if(k <= n)
    knapsack(k+1,cp+p[k],cw+w[k]);

   if(((cp+p[k]) > fp) && ( k == n))
      {
      fp = cp+p[k];
      fw = cw+w[k];

      for(j=0;j<=k;j++)
      x[j] = y[j];

      }
    }
if(bound(cp,cw,k) >= fp)
{

 y[k] = 0;
 if( k <= n)


 knapsack(k+1,cp,cw);

 if((cp > fp) && (k == n))
   {
   fp = cp;
   fw = cw;
   for(j=0;j<=k;j++)
   x[j] = y[j];
   }

}


}

