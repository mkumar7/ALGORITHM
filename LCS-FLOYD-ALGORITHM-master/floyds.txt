#include <stdio.h>
#include <stdlib.h>

int min(int,int);
void floyds(int p[10][10],int n)
{
 int i,j,k;
 for(k=1;k<=n;k++)
  for(i=1;i<=n;i++)
   for(j=1;j<=n;j++)
    if(i==j)
     p[i][j]=0;
    else
     p[i][j]=min(p[i][j],p[i][k]+p[k][j]);
}
int min(int a,int b)
{
 if(a<b)
  return(a);
 else
  return(b);
}
int main()
{
    int i,j,n;
    int p[100][100];
    n= 6 + rand() / (RAND_MAX / (9 - 6 + 1) + 1);
 for(i=0;i<n;i++)
{
    for(j=0;j<n;j++)
    {
        if(i==j)
        {
            p[i][j]=0;
        }
        else
            p[i][j] = 2 + rand() / (RAND_MAX / (9 - 2 + 1) + 1);
              printf("%d ", p[i][j]);
    }
        printf("\n");
    }

    printf("\n");

    for(i=0;i<n;i++)
    {

        for(j=0;j<n;j++)
    {
       p[i][j] = p[j][i];
       printf("%d ", p[i][j]);
    }
     printf("\n");
    }
    floyds(p,n);
 printf("\n shortest distance matrix is:\n");
 for(i=1;i<=n;i++)
 {
  for(j=1;j<=n;j++)
   printf("%d \t",p[i][j]);
  printf("\n");
 }
 printf("\n The length of shortest paths are:\n");
 for(i=1;i<=n;i++)
  for(j=1;j<=n;j++)
  {
   if(i!=j)
    printf("\n <%d,%d>=%d",i,j,p[i][j]);
  }
}

