#include<stdio.h>
#include<conio.h>
#include<stdlib.h>

// The maximum number of vertex for the sample random graph.
#define infinity 999
#define max1 10

int i,j,k,a,b,u,v,n,n1,ne=1,r,q,a1,b1,v1,u1,ne1=0;
int min,min1,mincost=0,mincost1=0,parent[9],visited[10]={0};

int find(int);
int uni(int,int);
void prims(int[100][100],int);
void kruskal(int [100][100],int);


void prims(int p[100][100],int n)
{
printf("n=%d",n);
 for(i=1;i<=n;i++)
{

 for(j=1;j<=n;j++)
  {

    if(p[i][j]==0)
    p[i][j]=999;

  }  visited[1]=1;

    while(ne<n)
    {
        for(i=1,min=999;i<=n;i++)
        {

        for(j=1;j<=n;j++)
        if(p[i][j]<min)
        if(visited[i]!=0)
        {
            min=p[i][j];
            a=u=i;
            b=v=j;
        }
        if(visited[u]==0 || visited[v]==0)
        {
            printf("\n Edge %d:(%d %d) weight:%d",ne++,a,b,min);
            mincost+=min;
            visited[b]=1;
        }
            p[a][b]=p[b][a]=999;
        }


    } }printf("\n\nMinimum weight = %d\n\n",mincost);

}


void kruskal(int cost[100][100],int n1)

{

for(q=1;q<=n1;q++)
{

  for(r=1;r<=n1;r++)

{


   if(cost[q][r]==0)
    cost[q][r]=999;
}
}
 printf("\nThe edges of Minimum Cost Spanning Tree are\n");
 while(ne1<n1)
 {
  for(q=0,min1=999;q<=n1;q++)
  {
   for(r=0;r<=n1;r++)
   {
    if(cost[q][r]<min1)
    {
     min1=cost[q][r];
     a1=u1=q;
     b1=v1=r;
    }
   }
  }


  u1=find(u1);
  v1=find(v1);
  if(uni(u1,v1))
  {
   printf("\n%d edge (%d,%d) =%d",ne1++,a1,b1,min1);
   mincost1 +=min1;
  }
  cost[a1][b1]=cost[b1][a1]=999;
 }
 printf("\n\tMinimum cost = %d",mincost1);



}
int find(int q)
{
 while(parent[q])
 q=parent[q];
 return q;
}
int uni(int q,int r)
{
 if(q!=r)
 {
  parent[r]=q;
  return 1;
 }
 return 0;
}

int main()
{


	int ch;
// to generate random graph.
   int p[100][100],n;
	printf("Enter number of nodes : ");
	scanf("%d",&n);
  int n1=n;

     /*   int z=1+(int) (10.0*rand()/(RAND_MAX+1.0));*/
 for(i=0;i<n;i++)
{
    for(j=0;j<n;j++)
    {
        if(i==j)
        {
            p[i][j]=0;
        }
        else
            p[i][j] =1+(int) (10.0*rand()/(RAND_MAX+1));
              printf("%d ", p[i][j]);
    }
        printf("\n");
    }

    printf("\n");


	// Print the random graph.
	printf("\nThe generated undirected random graph is: ");
	for(i = 0; i <=n; i++)
	{
		int count = 0;
		printf("\n\t  %d    -> {", i+1);
		for(j = 1; j <=n; j++)
		{
			if(p[j][0] == i+1)
			{
				printf("%d  ",p[j][1]);
				count++;
			}
			else if(p[j][1] == i+1)
			{
				printf("%d  ",p[j][0]);
				count++;
			}
			else if(j == max1-1 && count == 0)
				printf("Isolated Vertex!");
		}
		printf(" }");
	}

    do
        {

        printf("\n\n1.Implement Prim’s minimum spanning tree algorithm\n");
        printf("2.Implement kruskal’s minimum spanning tree algorithm\n");
        printf("3.Both\n");
        printf("4.Exit\n");
        printf("\nenter Your choice?");
        scanf("%d",&ch);
        switch(ch)
        {

            case 1:
           prims(p,n);
                break;
          case 2:
            kruskal(p,n1);
                break;
          case 3:  prims(p,n);
                   kruskal(p,n);
                break;
        case 4:exit(0);
        }//switch close

    }while(ch!=4);//while close

getch();
return 0;
}

